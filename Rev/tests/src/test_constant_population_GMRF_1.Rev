seed(42)

###------------------------------
##          Data 
###------------------------------

### Read in the sequence alignment
data <- readDiscreteCharacterData("data/constant_population.nex")

root_height <- 150000  #this is edge of infinite grid cell -- shapiro paper est 136k (111k to 164k)

### Read in taxa
taxa = readTaxonData("data/reduced_taxa.txt"," ")
num_taxa = taxa.size()

###-------------------------------
##          Set Grid    
###-------------------------------

# set my move index
mi = 0

# set move index for up-down moves
miud = 0

# define number of population sizes through time
NUM_INTERVALS = 99 + 1
NIM1 = NUM_INTERVALS - 1

# Chop up duration from root to present into equally sized intervals
interval_times <- root_height * seq(1, NIM1, 1)/NIM1

######################################
# Define population sizes and priors #
######################################


zeta <- 0.005
zsig ~ dnHalfCauchy(0, 1)

zsig.setValue(runif(1, 0.05, 0.5)[1])

print("got past sig model", "\n")


sig := zsig*zeta


# Prior on population size at the present (diffuse)
zlog_Ne1 ~ dnNormal(0, 1)

zlog_Ne1.setValue(rnorm(1,0,.1)[1])

moves[++mi] = mvSlideBactrian(zlog_Ne1,weight=1.0/100.0,sigma=1.0,tune=true) # RevBayes targets an acceptance of ~44% when autotuning by default, we can change this as we desire, as in this parameter where sampling has a lot of trouble

print("got to Ne model", "\n")

# Start accumulating vector of population sizes

Ne[1] := exp(10.7 + 5*zlog_Ne1)

# Flesh out the population sizes with skyride model
for (i in 1:(NUM_INTERVALS-1)) {
    index = i+1
    
    # specify normal priors on the difference between sequential population sizes
    # we use a non-centralized parameterization
    delta_logNe[i] ~ dnNormal( mean=0, sd=sig )
    
    # calculate population size in interval
    Ne[index] := Ne[i] * exp(delta_logNe[i])

}


moves[++mi] = mvEllipticalSliceSamplingSimple(delta_logNe,weight=3.0/100.0,tune=false)
moves[++mi] = mvGMRFHyperpriorGibbs(zsig, delta_logNe, zeta, weight=1.0/100.0)

############################
# Coalescent prior on tree #
############################

print("got to tree model", "\n")

# Define our model
psi ~ dnHeterochronousCoalescentSkyline(theta   = Ne, times   = interval_times,  method  = "specified", taxa   = taxa)

## Tree proposals
# Moves on node times (excluding root height)
moves[++mi] = mvNodeTimeSlideUniform(psi, weight=20.0/100.0)
moves[++mi] = mvNodeTimeScale(psi, weight=20.0/100.0)
moves[++mi] = mvSubtreeScale(psi, weight=20.0/100.0)

# Moves on root height
moves[++mi] = mvRootTimeScaleBactrian(psi, weight=4.0/100.0)

# Moves on tree topology
total_tree_weight_BEAST = 28
moves[++mi] = mvNarrow(psi, weight=9.0/(9.0+9.0+168.0)*total_tree_weight_BEAST/100.0)
moves[++mi] = mvNNI(psi, weight=9.0/(9.0+9.0+168.0)*total_tree_weight_BEAST/100.0)
moves[++mi] = mvFNPR(psi, weight=168.0/(9.0+9.0+168.0)*total_tree_weight_BEAST/100.0)

TL := psi.treeLength()
RA := psi.rootAge()

######################
# Substitution model #
######################

print("got to sub model", "\n")

# Wrap up kappa and pi into HKY model
Q := fnJC(4)

clock_rate <- 5.38e-7

#############
# The Model #
#############

seq ~ dnPhyloCTMC(tree=psi, Q=Q, branchRates=clock_rate, nSites=data.nchar())

seq.clamp(data)

### workspace model wrapper ###
mymodel = model(Ne)

### set up the monitors that will output parameter values to file and screen 
mni = 0
monitors[++mni] = mnModel(filename="output/GMRF_test_constant_population_1.log",printgen=10000, separator = TAB)
monitors[++mni] = mnFile(filename="output/GMRF_test_constant_population_1.trees",printgen=10000, separator = TAB, psi)
monitors[++mni] = mnScreen(printgen=10000,Ne[1],Ne[50],Ne[99],sig)

################
# The Analysis #
################

### workspace mcmc ###
mymcmc = mcmc(mymodel, monitors, moves)

### pre-burnin to tune the proposals ###
mymcmc.burnin(generations=5000000,tuningInterval=1e5)
mymcmc.operatorSummary()

### run the MCMC ###
mymcmc.run(generations=50000000)
mymcmc.operatorSummary()



## quit ##
q()
